/*
//@HEADER
// ************************************************************************
//
//                        Kokkos v. 2.0
//              Copyright (2014) Sandia Corporation
//
// Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
// the U.S. Government retains certain rights in this software.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
// 1. Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the Corporation nor the names of the
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Questions Contact  H. Carter Edwards (hcedwar@sandia.gov)
//
// ************************************************************************
//@HEADER
*/

#include <limits>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include "sys/time1.h"
#include <sys/stat.h>
#include <algorithm>
#include <iostream>
#include <fstream>

#include <cmath>
#include "generate_stats.h"
void checkSizes( int &N, int &M, long long &S, int &nrepeat );
/*__global__ 
void step_func(double* d_result, double step_c, long num_steps, long num_steps_per_thread) {
    int tid = threadIdx.x;
    int i = blockIdx.x * blockDim.x + tid;  
    double thread_result = 0.0;
    double x; 
    for (int j = 0; j < num_steps_per_thread ; j++){
	if((i * num_steps_per_thread + j) < num_steps) {
		x = (i * num_steps_per_thread  + j - 0.5) * step_c;
		thread_result += 4.0/(1.0+x*x); 	
	}
    }
    atomicAdd(d_result, thread_result);
}
*/

__global__ void matrix_vector(double* d_result, double* d_block,  double* d_A, double* d_x, double* d_y, int height, int width){
	extern __shared__ sdata[]; 
	if(threadIdx.x == 0 && threadIdx.y == 0)
		d_block[blockIdx.y * blockDim.y + blockIdx.x] = 0;
	__syncthreads();
	int Row = blockIdx.y * blockDim.y + threadIdx.y;
	int Col = blockIdx.x * blockDim.x + threadIdx.x;
	int i = threadIdx.y * blockDim.y + threadIdx.x
	sdata[i] = 0; 

	if((Row < height) &&  (Col < width)){
		sdata[i] = d_A[Row * width + Col] * d_x[Row]; 
	}	
	__syncthreads();
	for(int s = 1; s < blockDim.y * blockDim.x ; s *=2) {
		int index= 2 * i * s; 
		if ( i < blockDim.y * blockDim.x) {
			sdata[i] += sdata[index+s];
		}	
		__synctreads();
	}
	if( i == 0 ) {
		d_result[blockIdx.y * blockDim.y + blockIdx.x] = sdata[0];
	}

	if(threadIdx.x == 0 && threadIdx.y == 0){
		atomicAdd(d_result, d_block[blockIdx.y * blockDim.y + blockIdx.x] * d_y[Col]);
	}
}
/*	    for(int s = 1; s < blockDim.x; s *= 2){
		int index = 2 * tid * s ; 
		if(index < blockDim.x) {
		    s_data[index] += s_data[index + s];
		}
		__syncthreads();
	    } 
	    if(tid == 0){
		d_result[blockIdx.x] = s_data[0];
	    } 
*/
//void generateStats(const char (&version)[], const int nb_core, const int N, const int M,  const double &runtime);
/*for(int i = 0; i < N; i++){
		for( int j = 0 ; j < M ; j++ ) {
			result_line += A[i * M + j] * x[j];
		}
		result += result_line * y[i]; 
		result_line = 0; 
			
	}
	*/
int main( int argc, char* argv[] )
{
  int N = -1;         // number of rows 2^12
  int M = -1;         // number of columns 2^10
  long long S = -1;         // total size 2^22
  int numberCores = 1; 
  int nrepeat = 100;  // number of repeats of the test

  // Read command line arguments.
  for ( int i = 0; i < argc; i++ ) {
    if ( ( strcmp( argv[ i ], "-N" ) == 0 ) || ( strcmp( argv[ i ], "-Rows" ) == 0 ) ) {
      N = pow( 2, atoi( argv[ ++i ] ) );
      printf( "  User N is %d\n", N );
    }
    else if ( ( strcmp( argv[ i ], "-M" ) == 0 ) || ( strcmp( argv[ i ], "-Columns" ) == 0 ) ) {
      M = pow( 2, atof( argv[ ++i ] ) );
      printf( "  User M is %d\n", M );
    }
    else if ( ( strcmp( argv[ i ], "-S" ) == 0 ) || ( strcmp( argv[ i ], "-Size" ) == 0 ) ) {
      S = pow( 2, atof( argv[ ++i ] ) );
      printf( "  User S is %lld\n", S );
    }
    else if ( strcmp( argv[ i ], "-nrepeat" ) == 0 ) {
      nrepeat = atoi( argv[ ++i ] );
    }
    else if ( strcmp( argv[ i ], "-C" ) == 0 ) {
      numberCores  = atoi( argv[ ++i ] );
    }
    else if ( ( strcmp( argv[ i ], "-h" ) == 0 ) || ( strcmp( argv[ i ], "-help" ) == 0 ) ) {
      printf( "  y^T*A*x Options:\n" );
      printf( "  -Rows (-N) <int>:      exponent num, determines number of rows 2^num (default: 2^12 = 4096)\n" );
      printf( "  -Columns (-M) <int>:   exponent num, determines number of columns 2^num (default: 2^10 = 1024)\n" );
      printf( "  -Size (-S) <int>:      exponent num, determines total matrix size 2^num (default: 2^22 = 4096*1024 )\n" );
      printf( "  -nrepeat <int>:        number of repetitions (default: 100)\n" );
      printf( "  -help (-h):            print this message\n\n" );
      exit( 1 );
    }
  }

  // Check sizes.
  checkSizes( N, M, S, nrepeat );

  // Allocate x,y,A
  auto h_y = new double[N];  
  auto h_x = new double[M];
  auto h_A = new double[N * M];

  // Initialize y vector to 1.
std::fill_n(h_y, N, 1);
std::fill_n(h_x, M, 1);
std::fill_n(h_A, N*M, 1);
  // Initialize x vector to 1.

  // Initialize A matrix, you can use a 1D index if you want a flat structure (i.e. a 1D array) e.g. j*M+i is the same than [j][i]

  // Timer products.
  struct timeval begin, end;
  double result = 0 ; 
  double *h_result = (double*) malloc(N * sizeof(double));
  *h_result = 0;
  gettimeofday( &begin, NULL );
  double *d_result, *d_block, *d_A, *d_x, *d_y; 
  cudaMalloc((void **) &d_result, sizeof(double));
  // not the right size
  cudaMalloc((void **) &d_block, N * M  * sizeof(double));
  cudaMalloc((void **) &d_A, M * N * sizeof(double));
  cudaMalloc((void **) &d_x, M * sizeof(double));
  cudaMalloc((void **) &d_y, N * sizeof(double));

 
  cudaMemcpy(d_A, h_A,  N * M * sizeof(double), cudaMemcpyHostToDevice); 
  cudaMemcpy(d_x, h_x, M * sizeof(double), cudaMemcpyHostToDevice); 
  cudaMemcpy(d_y, h_y, N * sizeof(double), cudaMemcpyHostToDevice); 

  for ( int repeat = 0; repeat < nrepeat; repeat++ ) {
  cudaMemcpy(d_result, &result , sizeof(double), cudaMemcpyHostToDevice); 
    // For each line i
        // Multiply the i lines with the vector x 
        // Sum the results of the previous step into a single variable
        // Multiply the result of the previous step with the i value of vector y
        // Sum the results of the previous step into a single variable (result)
	  // 1 block per line 
  	printf("before the kenrel. \n");
	 dim3  DimGrid((N-1)/16 + 1 , (M-1) / 16 + 1, 1); 	
	 dim3  DimBlock( 16, 16, 1); 	
	 matrix_vector<<<DimGrid, DimBlock>>>(d_result, d_block, d_A, d_x, d_y, M, N);
	
	 cudaMemcpy(&result, d_result, sizeof(double), cudaMemcpyDeviceToHost); 
    // Output result.
    if ( repeat == ( nrepeat - 1 ) ) {
      printf( "  Computed result for %d x %d is %lf\n", N, M, result );
    }

    const double solution = (double) N * (double) M;

    if ( result != solution ) {
      printf( "  Error: result( %lf ) != solution( %lf )\n", result, solution );
    }
	
    	*h_result = 0;
	result = 0 ;
  }

  gettimeofday( &end, NULL );

  // Calculate time.
  //double time = timer.seconds();
  double time = 1.0 * ( end.tv_sec - begin.tv_sec ) +
                1.0e-6 * ( end.tv_usec - begin.tv_usec );

  // Calculate bandwidth.
  // Each matrix A row (each of length M) is read once.
  // The x vector (of length M) is read N times.
  // The y vector (of length N) is read once.
  // double Gbytes = 1.0e-9 * double( sizeof(double) * ( 2 * M * N + N ) );
  double Gbytes = 1.0e-9 * double( sizeof(double) * ( M + M * N + N ) );

  // Print results (problem size, time and bandwidth in GB/s).
  printf( "  N( %d ) M( %d ) nrepeat ( %d ) problem( %g MB ) time( %g s ) bandwidth( %g GB/s )\n",
          N, M, nrepeat, Gbytes * 1000, time, Gbytes * nrepeat / time );
 generateStats(numberCores, N, M, time);

  cudaFree(d_A);
  cudaFree(d_x);
  cudaFree(d_y);
  cudaFree(d_block);
  cudaFree(d_result);
  std::free(h_A);
  std::free(h_y);
  std::free(h_x);
  std::free(h_result);

  return 0;
}

void checkSizes( int &N, int &M, long long &S, int &nrepeat ) {
  // If S is undefined and N or M is undefined, set S to 2^22 or the bigger of N and M.
  if ( S == -1 && ( N == -1 || M == -1 ) ) {
    S = pow( 2, 22 );
    if ( S < N ) S = N;
    if ( S < M ) S = M;
  }

  // If S is undefined and both N and M are defined, set S = N * M.
  if ( S == -1 )   S = 1LL * N * M;

  // If both N and M are undefined, fix row length to the smaller of S and 2^10 = 1024.
  if ( N == -1 && M == -1 ) {
    if ( S > 1024 ) {
      M = 1024;
    }
    else {
      M = S;
    }
  }

  // If only M is undefined, set it.
  if ( M == -1 ) M = S / N;

  // If N is undefined, set it.
  if ( N == -1 ) N = S / M;

  printf( "  Total size S = %lld N = %d M = %d\n", S, N, M );

  // Check sizes.
  if ( ( S < 0 ) || ( N < 0 ) || ( M < 0 ) || ( nrepeat < 0 ) ) {
    printf( "  Sizes must be greater than 0.\n" );
    exit( 1 );
  }

  if ( ( 1LL * N * M ) != S ) {
    printf( "  N * M != S\n" );
    exit( 1 );
  }
}
